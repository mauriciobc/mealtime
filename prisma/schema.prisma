generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Household {
  id         Int      @id @default(autoincrement())
  name       String
  inviteCode String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  ownerId    Int
  owner      User     @relation("OwnedHouseholds", fields: [ownerId], references: [id])
  cats       Cat[]
  users      User[]
  notifications Notification[]
}

model User {
  id          Int          @id @default(autoincrement())
  name        String
  email       String       @unique
  role        String
  timezone    String?      @default("UTC")
  language    String?      @default("pt-BR")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  householdId Int?
  password    String?
  feedingLogs FeedingLog[]
  notifications Notification[]
  household   Household?   @relation(fields: [householdId], references: [id])
  ownedCats   Cat[]        @relation("CatOwner")
  ownedHouseholds Household[] @relation("OwnedHouseholds")
}

model Cat {
  id              Int         @id @default(autoincrement())
  name            String
  photoUrl        String?
  birthdate       DateTime?
  weight          Float?      // Stores the *latest* weight
  weightGoal      Float?      // Target weight for the cat
  restrictions    String?
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  householdId     Int
  feedingInterval Int         @default(8)
  portion_size    Float?      @default(0)
  userId          Int
  owner           User        @relation("CatOwner", fields: [userId], references: [id])
  household       Household   @relation(fields: [householdId], references: [id])
  feedingLogs     FeedingLog[]
  schedules       Schedule[]
  groups          CatGroup[]   @relation("CatToGroup")
  notifications   Notification[]
  weightMeasurements WeightMeasurement[] // Relation to historical measurements

  @@index([userId])
}

model CatGroup {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cats      Cat[]    @relation("CatToGroup")
}

model Schedule {
  id            Int       @id @default(autoincrement())
  catId         Int
  type          String
  interval      Int
  times         String
  overrideUntil DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  cat           Cat       @relation(fields: [catId], references: [id])
}

model FeedingLog {
  id          Int      @id @default(autoincrement())
  catId       Int
  userId      Int
  timestamp   DateTime
  portionSize Float?
  notes       String?
  createdAt   DateTime @default(now())
  status      String?  @default("completed")
  user        User     @relation(fields: [userId], references: [id])
  cat         Cat      @relation(fields: [catId], references: [id])
}

model Notification {
  id          Int       @id @default(autoincrement())
  title       String
  message     String
  type        String
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  userId      Int
  catId       Int?
  householdId Int?
  actionUrl   String?
  icon        String?
  timestamp   DateTime?
  data        String?   // JSON string para dados adicionais
  user        User      @relation(fields: [userId], references: [id])
  cat         Cat?      @relation(fields: [catId], references: [id])
  household   Household? @relation(fields: [householdId], references: [id])

  @@index([userId])
  @@index([catId])
  @@index([householdId])
}

// Model for storing historical weight measurements
model WeightMeasurement {
  id          Int       @id @default(autoincrement())
  catId       Int
  weight      Float     // The weight measured
  unit        String    @default("kg") // e.g., kg, lb - Consider making this an Enum if strict values are needed
  measuredAt  DateTime  @default(now()) // Timestamp of the measurement
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  cat         Cat       @relation(fields: [catId], references: [id], onDelete: Cascade) // Cascade delete measurements if cat is deleted

  @@index([catId])
  @@index([measuredAt]) // Index for sorting/querying by date
}

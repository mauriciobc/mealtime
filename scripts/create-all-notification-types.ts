import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// ID do usu√°rio que est√° logado no navegador
const currentUserId = '2e94b809-cc45-4dfb-80e1-a67365d2e714';

async function createAllNotificationTypes() {
  try {
    console.log('üîç Criando notifica√ß√µes para todos os casos de uso...');
    console.log(`üë§ User ID: ${currentUserId}\n`);

    const notifications = [
      // 1. FEEDING - Notifica√ß√µes de alimenta√ß√£o
      {
        user_id: currentUserId,
        title: 'üçΩÔ∏è Novo Registro de Alimenta√ß√£o',
        message: 'Ziggy foi alimentado com 8g de ra√ß√£o por Mauricio Castro.',
        type: 'feeding',
        is_read: false,
        metadata: {
          source: 'feeding-registration',
          catId: '0fc3ce4b-04ee-4ec0-878d-1ddd8a8f7245',
          catName: 'Ziggy',
          feederName: 'Mauricio Castro',
          quantity: 8,
          unit: 'g',
          timestamp: new Date().toISOString()
        }
      },
      {
        user_id: currentUserId,
        title: '‚è∞ Alimenta√ß√£o Atrasada',
        message: 'Ziggy n√£o foi alimentado nos √∫ltimos 4 horas. Verifique se est√° tudo bem.',
        type: 'feeding',
        is_read: false,
        metadata: {
          source: 'feeding-check',
          catId: '0fc3ce4b-04ee-4ec0-878d-1ddd8a8f7245',
          catName: 'Ziggy',
          lastFeedingHours: 4.5,
          timestamp: new Date().toISOString()
        }
      },

      // 2. REMINDER - Lembretes de alimenta√ß√£o
      {
        user_id: currentUserId,
        title: 'üîî Lembrete: Hora da Alimenta√ß√£o',
        message: '√â hora de alimentar Ziggy! √öltima refei√ß√£o foi h√° 3 horas.',
        type: 'reminder',
        is_read: false,
        metadata: {
          source: 'scheduled-reminder',
          catId: '0fc3ce4b-04ee-4ec0-878d-1ddd8a8f7245',
          catName: 'Ziggy',
          scheduledTime: new Date(Date.now() + 3600000).toISOString(),
          timestamp: new Date().toISOString()
        }
      },
      {
        user_id: currentUserId,
        title: 'üìÖ Alimenta√ß√£o Programada em 15 minutos',
        message: 'Ziggy est√° marcado para alimenta√ß√£o em 15 minutos.',
        type: 'reminder',
        is_read: false,
        metadata: {
          source: 'upcoming-feeding',
          catId: '0fc3ce4b-04ee-4ec0-878d-1ddd8a8f7245',
          catName: 'Ziggy',
          dueIn: 15,
          unit: 'minutes',
          timestamp: new Date().toISOString()
        }
      },

      // 3. WARNING - Avisos
      {
        user_id: currentUserId,
        title: '‚ö†Ô∏è Poss√≠vel Alimenta√ß√£o Duplicada',
        message: 'Ziggy foi alimentado 2 vezes nos √∫ltimos 30 minutos. Verifique se isso √© correto.',
        type: 'warning',
        is_read: false,
        metadata: {
          source: 'duplicate-feeding-check',
          catId: '0fc3ce4b-04ee-4ec0-878d-1ddd8a8f7245',
          catName: 'Ziggy',
          feedingCount: 2,
          timeWindow: 30,
          unit: 'minutes',
          timestamp: new Date().toISOString()
        }
      },
      {
        user_id: currentUserId,
        title: '‚ö†Ô∏è Gato n√£o Alimentado',
        message: 'Ziggy n√£o recebeu nenhuma alimenta√ß√£o hoje. Verifique se ele est√° bem.',
        type: 'warning',
        is_read: false,
        metadata: {
          source: 'missed-feeding',
          catId: '0fc3ce4b-04ee-4ec0-878d-1ddd8a8f7245',
          catName: 'Ziggy',
          missedDays: 1,
          timestamp: new Date().toISOString()
        }
      },

      // 4. INFO - Informa√ß√µes gerais
      {
        user_id: currentUserId,
        title: '‚ÑπÔ∏è Relat√≥rio Semanal',
        message: 'Ziggy foi alimentado 42 vezes esta semana com uma m√©dia de 9.3g por refei√ß√£o.',
        type: 'info',
        is_read: false,
        metadata: {
          source: 'weekly-report',
          catId: '0fc3ce4b-04ee-4ec0-878d-1ddd8a8f7245',
          catName: 'Ziggy',
          weekStart: new Date().toISOString(),
          feedingCount: 42,
          averageQuantity: 9.3,
          unit: 'g',
          timestamp: new Date().toISOString()
        }
      },
      {
        user_id: currentUserId,
        title: '‚ú® Bem-vindo ao MealTime!',
        message: 'Configure seus gatos e hor√°rios de alimenta√ß√£o para come√ßar a usar o sistema.',
        type: 'info',
        is_read: false,
        metadata: {
          source: 'onboarding',
          step: 1,
          timestamp: new Date().toISOString()
        }
      },

      // 5. HOUSEHOLD - Notifica√ß√µes de domic√≠lio
      {
        user_id: currentUserId,
        title: 'üè† Novo Membro Adicionado',
        message: 'Maria Silva foi adicionada ao seu domic√≠lio e agora pode registrar alimenta√ß√µes.',
        type: 'household',
        is_read: false,
        metadata: {
          source: 'household-update',
          householdId: '786f7655-b100-45d6-b75e-c2a85add5e5b',
          action: 'member-added',
          memberName: 'Maria Silva',
          memberId: 'new-member-id',
          timestamp: new Date().toISOString()
        }
      },
      {
        user_id: currentUserId,
        title: 'üëã Membro Saiu do Domic√≠lio',
        message: 'Jo√£o Santos deixou seu domic√≠lio.',
        type: 'household',
        is_read: false,
        metadata: {
          source: 'household-update',
          householdId: '786f7655-b100-45d6-b75e-c2a85add5e5b',
          action: 'member-left',
          memberName: 'Jo√£o Santos',
          memberId: 'old-member-id',
          timestamp: new Date().toISOString()
        }
      },

      // 6. SYSTEM - Notifica√ß√µes do sistema
      {
        user_id: currentUserId,
        title: 'üîß Atualiza√ß√£o do Sistema',
        message: 'Uma nova vers√£o do MealTime est√° dispon√≠vel. Recarregue a p√°gina para atualizar.',
        type: 'system',
        is_read: false,
        metadata: {
          source: 'system-update',
          version: '1.2.0',
          releaseDate: new Date().toISOString(),
          features: ['Novos √≠cones', 'Melhor performance'],
          timestamp: new Date().toISOString()
        }
      },
      {
        user_id: currentUserId,
        title: '‚öôÔ∏è Configura√ß√µes Atualizadas',
        message: 'Suas configura√ß√µes de notifica√ß√µes foram atualizadas com sucesso.',
        type: 'system',
        is_read: false,
        metadata: {
          source: 'settings-update',
          updatedFields: ['feedReminder', 'emailNotifications'],
          timestamp: new Date().toISOString()
        }
      },

      // 7. ERROR - Erros
      {
        user_id: currentUserId,
        title: '‚ùå Erro ao Registrar Alimenta√ß√£o',
        message: 'N√£o foi poss√≠vel registrar a alimenta√ß√£o de Ziggy. Tente novamente.',
        type: 'error',
        is_read: false,
        metadata: {
          source: 'feeding-error',
          catId: '0fc3ce4b-04ee-4ec0-878d-1ddd8a8f7245',
          catName: 'Ziggy',
          errorCode: 'REGISTRATION_FAILED',
          errorMessage: 'Network timeout',
          timestamp: new Date().toISOString()
        }
      },
      {
        user_id: currentUserId,
        title: '‚ö†Ô∏è Erro de Sincroniza√ß√£o',
        message: 'N√£o foi poss√≠vel sincronizar as notifica√ß√µes. Verifique sua conex√£o.',
        type: 'error',
        is_read: false,
        metadata: {
          source: 'sync-error',
          errorCode: 'SYNC_FAILED',
          errorMessage: 'Connection lost',
          retryCount: 3,
          timestamp: new Date().toISOString()
        }
      },
    ];

    let createdCount = 0;
    let errorCount = 0;

    console.log('üìù Criando notifica√ß√µes...\n');

    for (const notification of notifications) {
      try {
        const created = await prisma.notifications.create({
          data: notification
        });

        createdCount++;
        console.log(`‚úÖ [${createdCount}/${notifications.length}] ${notification.title}`);
        console.log(`   Tipo: ${notification.type} | Lida: ${notification.is_read ? 'Sim' : 'N√£o'}`);
        
      } catch (error: any) {
        errorCount++;
        console.error(`‚ùå Erro ao criar: ${notification.title}`);
        console.error(`   Erro: ${error.message}\n`);
      }
    }

    console.log('\n' + '='.repeat(60));
    console.log('üìä Resumo da Cria√ß√£o de Notifica√ß√µes');
    console.log('='.repeat(60));
    console.log(`‚úÖ Criadas com sucesso: ${createdCount}`);
    console.log(`‚ùå Erros: ${errorCount}`);
    console.log(`üìà Taxa de sucesso: ${((createdCount / notifications.length) * 100).toFixed(1)}%`);
    console.log('\nüéØ Notifica√ß√µes criadas por tipo:');
    
    const byType = notifications.reduce((acc, notif) => {
      acc[notif.type] = (acc[notif.type] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
    
    Object.entries(byType).forEach(([type, count]) => {
      console.log(`   ${type}: ${count}`);
    });
    
    console.log('\nüîî Agora volte ao navegador e veja todas as notifica√ß√µes!');

  } catch (error) {
    console.error('‚ùå Erro fatal ao criar notifica√ß√µes:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar a fun√ß√£o de forma ass√≠ncrona e tratar erros
(async () => {
  try {
    await createAllNotificationTypes();
    process.exit(0); // Sucesso
  } catch (error) {
    console.error('‚ùå Erro fatal ao executar o script:', error);
    process.exit(1); // Falha
  }
})();

